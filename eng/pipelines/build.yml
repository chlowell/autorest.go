trigger:
  branches:
    include:
    - feature/*

pr:
  branches:
    include:
    - feature/*

variables:
  BlobFeedUrl: https://azuresdkartifacts.blob.core.windows.net/azure-sdk-tools/index.json
  OfficialBuildId: $(Build.BuildNumber)
  NugetSecurityAnalysisWarningLevel: 'none'

resources:
  repositories:
    - repository: azure-sdk-tools
      type: github
      name: Azure/azure-sdk-tools
      endpoint: azure
    - repository: azure-sdk-for-go
      type: github
      name: Azure/azure-sdk-for-go
      endpoint: azure
    - repository: azure-sdk-build-tools
      type: git
      name: internal/azure-sdk-build-tools
      ref: refs/tags/azure-sdk-build-tools_20210603.1

stages:
  # TODO: build autorest.go
  # - stage: 'Build_and_Test'
  #   jobs:
  #     - job: Build
  #       timeoutInMinutes: 120
  #       pool:
  #         vmImage: windows-2019
  #       steps:
  #         - checkout: self
  #         - checkout: azure-sdk-tools
  #         - task: NodeTool@0
  #           displayName: "Install Node 14.x"
  #           inputs:
  #             versionSpec: '14.x'
  #         - script: |
  #             npm ci
  #           displayName: "Install packages"
  #           workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
  #         - script: 'dotnet pack src/AutoRest.CSharp/AutoRest.CSharp.csproj -o $(Build.ArtifactStagingDirectory) -warnaserror -c Release'
  #           name: Package
  #           displayName: 'Package'
  #           workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
  #           env:
  #             DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  #             DOTNET_CLI_TELEMETRY_OPTOUT: 1
  #             DOTNET_MULTILEVEL_LOOKUP: 0
  #         - pwsh: ./eng/CodeChecks.ps1
  #           displayName: "Check if code is up-to-date"
  #           workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
  #         - script: |
  #             dotnet test AutoRest.CSharp.sln
  #           displayName: "Test"
  #           env:
  #             DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  #             DOTNET_CLI_TELEMETRY_OPTOUT: 1
  #             DOTNET_MULTILEVEL_LOOKUP: 0
  #           workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
  #         - script: |
  #             dotnet test AutoRest.CSharp.sln -c Release
  #           displayName: "Test Release Configuration"
  #           env:
  #             DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  #             DOTNET_CLI_TELEMETRY_OPTOUT: 1
  #             DOTNET_MULTILEVEL_LOOKUP: 0
  #           workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
  #         - task: PublishBuildArtifacts@1
  #           condition: succeededOrFailed()
  #           displayName: 'Publish Artifacts'
  #           inputs:
  #             ArtifactName: packages
  #         - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
  #           - pwsh: >
  #               ./eng/PublishRelease.ps1
  #               -WorkingDirectory ./artifacts/bin/AutoRest.CSharp/Release/netcoreapp3.1/
  #               -CoverageDirectory ./artifacts/coverage
  #               -GitHubToken $(azuresdk-github-pat)
  #               -NpmToken $(azure-sdk-npm-token)
  #               -BuildNumber $(Build.BuildNumber)
  #               -Sha $(Build.SourceVersion)
  #               -CoverageUser $(storage-coverage-user)
  #               -CoveragePass $(storage-coverage-pass)
  #             failOnStderr: false
  #             displayName: 'Publish to GitHub, npm and coverage report'
  #             workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
  #     - template: smoke-test.yml
  #       parameters:
  #         name: SmokeTest_A_C
  #         filter: "^[a-b]"
  #     - template: smoke-test.yml
  #       parameters:
  #         name: SmokeTest_C_I
  #         filter: "^[c-i]"
  #     - template: smoke-test.yml
  #       parameters:
  #         name: SmokeTest_J_R
  #         filter: "^[j-r]"
  #     - template: smoke-test.yml
  #       parameters:
  #         name: SmokeTest_S_Z
  #         filter: "^[s-z]"

  # TODO: disabled this condition to make development easier. Add an appropriate condition here when the job works.
  # - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
    # - template: pipelines/stages/net-release-to-feed.yml@azure-sdk-build-tools
    #   parameters:
    #     ShouldTag: false
    #     ShouldSign: false
    #     ShouldPublishSymbols: false

  - stage: 'Update_azure_sdk_for_go'
    # dependsOn:
    #   - Build_and_Test
    #   - Release
    jobs:
      - job: Update
        pool:
          vmImage: ubuntu-20.04
        # TODO: script doesn't need the version to run (can just point it at autorest.go dir) but would be nice to update the script's default autorest.go version
        # variables:
          # AutorestGoVersion: $[stageDependencies.Build_and_Test.Build.outputs['Package.AutorestGoVersion']]
        steps:
          - checkout: self
          - checkout: azure-sdk-for-go
          - checkout: azure-sdk-tools
          - pwsh: ./build.ps1 -cleanGenerated -generate -goExtension=$(Build.SourcesDirectory)/autorest.go
            failOnStderr: true
            workingDirectory: $(Build.SourcesDirectory)/azure-sdk-for-go/eng/scripts
            displayName: 'Generate code in Azure SDK repo'

          # TODO: this step should open a PR in Azure/azure-sdk-for-go, maybe test it on the fork first ;-)
          # - template: /eng/common/pipelines/templates/steps/create-pull-request.yml@azure-sdk-tools
          #   parameters:
          #     BaseBranchName: main
          #     RepoName: azure-sdk-for-go
          #     PRBranchName: auto-update-autorest
          #     CommitMsg: Update autorest.go version to $(AutorestGoVersion)
          #     PRBody: Update autorest.go version to $(AutorestGoVersion)
          #     PRTitle:  Update autorest.go version
          #     PushArgs: -f
          #     WorkingDirectory: $(Build.SourcesDirectory)/azure-sdk-for-go
          #     ScriptDirectory: $(Build.SourcesDirectory)/azure-sdk-tools/eng/common/scripts
